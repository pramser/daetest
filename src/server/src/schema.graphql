scalar Date
scalar DateTime
scalar Int
scalar Time
scalar Upload

type Query {
  allTestRuns: [TestRun]
  allTestCases: [TestCase!]!
  testCaseById(id: ID!): TestCase
  testCasesByRunId(runid: String!): [TestCase]
}

type Mutation {
  createTestRun(testrun: TestRunInput): TestRun!
  uploadFile(file: Upload!): TestRun!
  multipleUpload(files: [Upload!]!): [TestRun!]
  createTestCase(runid: String!, testCase: TestCaseInput!): TestCase!
}

type TestRun {
  # File Metadata
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!

  # Test Metadata
  product: String!
  meta: String!
  status: TestRunStatus!
  type: TestRunType!
  createdat: DateTime!
}

input TestRunInput {
  filename: String!
  product: String
  meta: String
}

enum TestRunStatus {
  PENDING
  PASS
  FAIL
}

enum TestRunType {
  NONE
  TESTMON
  JUNIT
}

type TestCase {
  id: ID!
  runid: String!
  name: String!
  info: String!
  description: String!
  result: TestCaseResult!
}

input TestCaseInput {
  name: String!
  info: String!
  description: String!
}

enum TestCaseResult {
  NONE
  PASS
  FAIL
}

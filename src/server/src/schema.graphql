scalar Date
scalar DateTime
scalar Int
scalar Time
scalar Upload

type Query {
  allFiles: [File]
  allTestCases: [TestCase!]!
  testCaseById(id: ID!): TestCase
  testCasesByRunId(runid: String!): [TestCase]
}

type Mutation {
  createFile(file: FileInput): File!
  uploadFile(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]
  createTestCase(runid: String!, testCase: TestCaseInput!): TestCase!
}

type File {
  # File Metadata
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!

  # Test Metadata
  product: String!
  meta: String!
  filestatus: FileStatus!
  resulttype: ResultType!
  createdat: DateTime!
}

input FileInput {
  filename: String!
  product: String
  meta: String
}

enum FileStatus {
  PENDING
  PASS
  FAIL
}

enum ResultType {
  NONE
  TESTMON
  JUNIT
}

type TestCase {
  id: ID!
  runid: String!
  name: String!
  info: String!
  description: String!
  result: TestCaseResult!
}

input TestCaseInput {
  name: String!
  info: String!
  description: String!
}

enum TestCaseResult {
  NONE
  PASS
  FAIL
}
